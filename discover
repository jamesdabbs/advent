#!/usr/bin/env ruby

source, input, outfile, _ = ARGV

module ToModule
  refine String do
    def to_module
      sub("src/", "").gsub("/", ".").sub(".hs", "")
    end
  end
end

using ToModule

class Solution < Struct.new(:mod, :year, :day)
  MATCHER = /Y(?<year>\d{4}).D(?<day>\d+)/

  class << self
    def at_path(path)
      match = MATCHER.match(path)

      new(path.to_module, match[:year], match[:day])
    end
  end

  def import
    "import qualified #{mod}"
  end

  def tuple
    "( (#{year}, #{day}), solve #{mod}.solution )"
  end
end

solutions = Dir.
  glob("src/Problems/Y*/D*/Solution.hs").
  map { |path| Solution.at_path(path) }

body = <<~HS
module Problems.Problems where

import Protolude
import qualified Data.Map as Map
import Solution (solve)

#{solutions.map(&:import).sort.join("\n")}

solutions :: Map (Int, Int) (Text -> IO (Text, Text))
solutions = Map.fromList
  [ #{solutions.map(&:tuple).join("\n  , ")}
  ]
HS

File.write(outfile, body)
